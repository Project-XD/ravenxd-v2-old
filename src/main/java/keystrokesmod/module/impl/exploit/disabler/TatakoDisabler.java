package keystrokesmod.module.impl.exploit.disabler;

import keystrokesmod.Client;
import keystrokesmod.event.network.AttackEntityEvent;
import keystrokesmod.event.network.SendPacketEvent;
import keystrokesmod.event.player.PreAttackEvent;
import keystrokesmod.event.player.PreMotionEvent;
import keystrokesmod.eventbus.annotations.EventListener;
import keystrokesmod.module.impl.exploit.Disabler;
import keystrokesmod.module.setting.impl.SubMode;
import keystrokesmod.utility.PacketUtils;
import keystrokesmod.utility.Utils;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C02PacketUseEntity;
import net.minecraft.network.play.client.C03PacketPlayer;
import org.jetbrains.annotations.NotNull;

import java.util.concurrent.TimeUnit;

public class TatakoDisabler extends SubMode<Disabler> {
    private int hitTicks = 1001;
    private boolean working = false;

    public TatakoDisabler(String name, @NotNull Disabler parent) {
        super(name, parent);
    }

    @Override
    public void onDisable() throws Throwable {
        hitTicks = 1001;
        working = false;
        Utils.resetTimer();
    }

    @EventListener
    private void onSendPacket(@NotNull SendPacketEvent event) {
        Packet<?> packet = event.getPacket();
        if (packet instanceof C02PacketUseEntity && ((C02PacketUseEntity) packet).getAction() == C02PacketUseEntity.Action.ATTACK) {
            hitTicks = 0;
            return;
        }
        if (!(packet instanceof C03PacketPlayer.C06PacketPlayerPosLook)) {
            return;
        }
        if (hitTicks >= 5) {
            return;
        }

        C03PacketPlayer.C06PacketPlayerPosLook p = (C03PacketPlayer.C06PacketPlayerPosLook) packet;
        event.cancel();
        PacketUtils.sendPacket(new C03PacketPlayer.C04PacketPlayerPosition(
                p.getPositionX(), p.getPositionY(), p.getPositionZ(),
                p.isOnGround()
        ));
        Client.getExecutor().schedule(() -> PacketUtils.sendPacket(new C03PacketPlayer.C05PacketPlayerLook(
                p.getYaw(), p.getPitch(), p.isOnGround()
        )), 50, TimeUnit.MILLISECONDS);
        Utils.getTimer().timerSpeed = 0.5f;
        working = true;
    }

    @EventListener
    private void onPreMotion(PreMotionEvent event) {
        if (working) {
            Utils.resetTimer();
            working = false;
        }
        hitTicks++;
    }

    @EventListener
    private void onPreAttack(PreAttackEvent event) {
        if (working) {
            event.cancel();
        }
    }
}
